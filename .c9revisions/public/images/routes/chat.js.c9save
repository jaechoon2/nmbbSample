{"ts":1357706233033,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"module.exports = function(app, models) {\n  var io = require('socket.io');\n  var utils = require('connect').utils;\n  var cookie = require('cookie');\n  var Session = require('connect').middleware.session.Session;\n\n  var sio = io.listen(app.server)\n\n  sio.configure(function() {\n    app.isAccountOnline = function(accountId) {\n      var clients = sio.sockets.clients(accountId);\n      return (clients.length > 0);\n    };\n\n    sio.set('authorization', function( data, accept) {\n      var signedCookies = cookie.parse(data.headers.cookie);\n      var cookies = utils.parseSignedCookies(signedCookies,app.sessionSecret);\n      data.sessionID = cookies['express.sid'];\n      data.sessionStore = app.sessionStore;\n      data.sessionStore.get(data.sessionID, function(err, session) {\n        if ( err || !session ) {\n          return accept('Invalid session', false);\n        } else {\n          data.session = new Session(data, session);\n          accept(null, true);\n        }\n      });\n    });\n\n    sio.sockets.on('connection', function(socket) {\n      var session = socket.handshake.session;\n      var accountId = session.accountId;\n      var sAccount = null;\n      socket.join(accountId);\n\n      app.triggerEvent('event:' + accountId, {\n        from: accountId,\n        action: 'login'\n      });\n\n      var handleContactEvent = function(eventMessage) {\n        socket.emit('contactEvent', eventMessage);\n      };\n\n      var subscribeToAccount = function(accountId) {\n        var eventName = 'event:' + accountId;\n        app.addEventListener(eventName, handleContactEvent);\n        console.log('Subscribing to ' + eventName);\n      };\n\n      models.Account.findById(accountId, function subscribeToFriendFeeds(account) {\n        var subscribedAccounts = {};\n        sAccount = account;\n        account.contacts.forEach(function(contact) {\n          if ( !subscribedAccounts[contact.accountId]) {\n            subscribeToAccount(contact.accountId);\n            subscribedAccounts[contact.accountId] = true;\n          }\n        });\n\n        if (!subscribedAccounts[accountId]) {\n          // Subscribe to my own updates\n          subscribeToAccount(accountId);\n        }\n      });\n\n      socket.on('disconnect', function() {\n        sAccount.contacts.forEach(function(contact) {\n          var eventName = 'event:' + contact.accountId;\n          app.removeEventListener(eventName, handleContactEvent);\n          console.log('Unsubscribing from ' + eventName);\n        });\n        app.triggerEvent('event:' + accountId, {\n          from: accountId,\n          action: 'logout'\n        });\n      });\n\n      socket.on('chatclient', function(data) {\n        sio.sockets.in(data.to).emit('chatserver', {\n          from: accountId,\n          text: data.text\n        });\n      });\n    });\n  });\n}"]],"start1":0,"start2":0,"length1":0,"length2":2777}]],"length":2777}
